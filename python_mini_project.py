# -*- coding: utf-8 -*-
"""Python Mini Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T9ebM05cQLhACxklDYX6meczvWjzie0f
"""

# Create a class to represent a user.
class User:
    def _initial_(self, name, address, payment_info):
        self.name = name
        self.address = address
        self.payment_info = payment_info

    def get_name(self):
        return self.name

    def get_address(self):
        return self.address

    def get_payment_info(self):
        return self.payment_info

# Create a class to represent an order.
class Order:
    def _initial_(self, user, items, total_cost):
        self.user = user
        self.items = items
        self.total_cost = total_cost

    def get_user(self):
        return self.user

    def get_items(self):
        return self.items

    def get_total_cost(self):
        return self.total_cost


import csv
# Function to load the menu from the CSV file
def load_menu():
    menu = {}

    with open('/content/menu.csv', 'r') as file:
        reader = csv.reader(file)
        next(reader)

        for row in reader:
            restaurant = row[0]
            category = row[1]
            item = row[2]
            price = float(row[3])

            if restaurant not in menu:
                menu[restaurant] = {}

            if category not in menu[restaurant]:
                menu[restaurant][category] = {}

            menu[restaurant][category][item] = price

    return menu


# Function to display the menu categories
def display_categories(menu):
    print('Menu Categories:')
    for restaurant, categories in menu.items():
        print(f'Restaurant: {restaurant}')
        for category in categories:
            print(f'- {category}')
        print()

# Function to display the menu items within a category
def display_menu_items(menu, restaurant, category):
    print(f'{category} Menu for {restaurant}:')
    for item, price in menu[restaurant][category].items():
        print(f'{item}: ${price}')
    print()

# Function to calculate the final order price
def calculate_order_price(order, menu):
    total_price = 0

    for restaurant, categories in order.items():
        for category, items in categories.items():
            for item, quantity in items.items():
                price = menu[restaurant][category][item]
                total_price += price * quantity

    return total_price

# Function to create a new user account
def create_user_account(x,y):
    name = input("Enter your name: ")
    address = input("Enter your address: ")
    payment_info = input("Enter your payment information: ")
    password = input("Enter a password: ")

    with open('/content/users.csv', 'a', newline='') as file:
        writer = csv.writer(file)
        writer.writerow([name, address, payment_info, password])

    print("-- Account created successfully! --")

# Function to check if a user account exists
def is_user_exists(username):
    with open('/content/users.csv', 'r') as file:
        reader = csv.reader(file)
        for row in reader:
            if row[0] == username:
                return True
    return False

# Function to validate user login credentials
def login_user(username, password):
    with open('/content/users.csv', 'r') as file:
        reader = csv.reader(file)
        for row in reader:
            if row[0] == username and row[3] == password:
                return True
    return False

# Create a user interface.
print("-----------Welcome to the food ordering system!-----------")
print("                                                          ")


while True:
    user_input = input("Do you have an account? (Y/N): ")
    if user_input == "Y":
        # Login the user.
        username = input("Enter your username: ")
        password = input("Enter your password: ")
        if login_user(username, password):
            print("--------------Login successful!--------------")
            break
        else:
            print("Invalid username or password.")
    elif user_input == "N":
        # Create a new user account.
        username = input("Enter a username (to check if it's available): ")
        if is_user_exists(username):
            print("Username already exists. Please choose a different username.")
            print("____________________________________________________________")
        else:
            print("Username is available")
            create_user_account(username, password)
            print("____________________________________________________________")
            break

